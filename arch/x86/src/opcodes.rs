use crate::SegmentReg::{Cs, Ds, Es, Ss};
use crate::{instr, ExtSystem, Instr, Prefixes, System};
use firn_arch_x86_macros::new_instr;
use std::io;
use std::io::Write;

fn match_opcode(sys: &mut System, opcode: u8, prefixes: Prefixes) -> Instr {
    match opcode {
        0x00 => new_instr!(opcode, prefixes, instr::arith::add_rm8_r8),
        0x01 => new_instr!(opcode, prefixes, instr::arith::add_rm16_r16),
        0x02 => new_instr!(opcode, prefixes, instr::arith::add_r8_rm8),
        0x03 => new_instr!(opcode, prefixes, instr::arith::add_r16_rm16),
        0x04 => new_instr!(opcode, prefixes, instr::arith::add_al_imm8),
        0x05 => new_instr!(opcode, prefixes, instr::arith::add_ax_imm16),
        0x06 => new_instr!(opcode, prefixes, instr::stack::push_es),
        0x07 => new_instr!(opcode, prefixes, instr::stack::pop_es),
        0x08 => new_instr!(opcode, prefixes, instr::arith::or_rm8_r8),
        0x09 => new_instr!(opcode, prefixes, instr::arith::or_rm16_r16),
        0x0a => new_instr!(opcode, prefixes, instr::arith::or_r8_rm8),
        0x0b => new_instr!(opcode, prefixes, instr::arith::or_r16_rm16),
        0x0c => new_instr!(opcode, prefixes, instr::arith::or_al_imm8),
        0x0d => new_instr!(opcode, prefixes, instr::arith::or_ax_imm16),
        0x0e => new_instr!(opcode, prefixes, instr::stack::push_cs),
        0x10 => new_instr!(opcode, prefixes, instr::arith::adc_rm8_r8),
        0x11 => new_instr!(opcode, prefixes, instr::arith::adc_rm16_r16),
        0x12 => new_instr!(opcode, prefixes, instr::arith::adc_r8_rm8),
        0x13 => new_instr!(opcode, prefixes, instr::arith::adc_r16_rm16),
        0x14 => new_instr!(opcode, prefixes, instr::arith::adc_al_imm8),
        0x15 => new_instr!(opcode, prefixes, instr::arith::adc_ax_imm16),
        0x16 => new_instr!(opcode, prefixes, instr::stack::push_ss),
        0x17 => new_instr!(opcode, prefixes, instr::stack::pop_ss),
        0x18 => new_instr!(opcode, prefixes, instr::arith::sbb_rm8_r8),
        0x19 => new_instr!(opcode, prefixes, instr::arith::sbb_rm16_r16),
        0x1a => new_instr!(opcode, prefixes, instr::arith::sbb_r8_rm8),
        0x1b => new_instr!(opcode, prefixes, instr::arith::sbb_r16_rm16),
        0x1c => new_instr!(opcode, prefixes, instr::arith::sbb_al_imm8),
        0x1d => new_instr!(opcode, prefixes, instr::arith::sbb_ax_imm16),
        0x1e => new_instr!(opcode, prefixes, instr::stack::push_ds),
        0x1f => new_instr!(opcode, prefixes, instr::stack::pop_ds),
        0x20 => new_instr!(opcode, prefixes, instr::arith::and_rm8_r8),
        0x21 => new_instr!(opcode, prefixes, instr::arith::and_rm16_r16),
        0x22 => new_instr!(opcode, prefixes, instr::arith::and_r8_rm8),
        0x23 => new_instr!(opcode, prefixes, instr::arith::and_r16_rm16),
        0x24 => new_instr!(opcode, prefixes, instr::arith::and_al_imm8),
        0x25 => new_instr!(opcode, prefixes, instr::arith::and_ax_imm16),
        0x28 => new_instr!(opcode, prefixes, instr::arith::sub_rm8_r8),
        0x29 => new_instr!(opcode, prefixes, instr::arith::sub_rm16_r16),
        0x2a => new_instr!(opcode, prefixes, instr::arith::sub_r8_rm8),
        0x2b => new_instr!(opcode, prefixes, instr::arith::sub_r16_rm16),
        0x2c => new_instr!(opcode, prefixes, instr::arith::sub_al_imm8),
        0x2d => new_instr!(opcode, prefixes, instr::arith::sub_ax_imm16),
        0x30 => new_instr!(opcode, prefixes, instr::arith::xor_rm8_r8),
        0x31 => new_instr!(opcode, prefixes, instr::arith::xor_rm16_r16),
        0x32 => new_instr!(opcode, prefixes, instr::arith::xor_r8_rm8),
        0x33 => new_instr!(opcode, prefixes, instr::arith::xor_r16_rm16),
        0x34 => new_instr!(opcode, prefixes, instr::arith::xor_al_imm8),
        0x35 => new_instr!(opcode, prefixes, instr::arith::xor_ax_imm16),
        0x38 => new_instr!(opcode, prefixes, instr::arith::cmp_rm8_r8),
        0x39 => new_instr!(opcode, prefixes, instr::arith::cmp_rm16_r16),
        0x3a => new_instr!(opcode, prefixes, instr::arith::cmp_r8_rm8),
        0x3b => new_instr!(opcode, prefixes, instr::arith::cmp_r16_rm16),
        0x3c => new_instr!(opcode, prefixes, instr::arith::cmp_al_imm8),
        0x3d => new_instr!(opcode, prefixes, instr::arith::cmp_ax_imm16),
        opcode @ 0x40..=0x47 => new_instr!(opcode, prefixes, instr::arith::inc_r16),
        opcode @ 0x48..=0x4f => new_instr!(opcode, prefixes, instr::arith::dec_r16),
        opcode @ 0x50..=0x57 => new_instr!(opcode, prefixes, instr::stack::push_r16),
        opcode @ 0x58..=0x5f => new_instr!(opcode, prefixes, instr::stack::pop_r16),
        0x60 => new_instr!(opcode, prefixes, instr::stack::pusha),
        0x61 => new_instr!(opcode, prefixes, instr::stack::popa),
        0x68 => new_instr!(opcode, prefixes, instr::stack::push_imm16),
        0x6a => new_instr!(opcode, prefixes, instr::stack::push_imm8),
        0x6c => new_instr!(opcode, prefixes, instr::strings::insb),
        0x6d => new_instr!(opcode, prefixes, instr::strings::insw),
        0x6e => new_instr!(opcode, prefixes, instr::strings::outsb),
        0x6f => new_instr!(opcode, prefixes, instr::strings::outsw),
        0x70 => new_instr!(opcode, prefixes, instr::conditionals::jo_rel8),
        0x71 => new_instr!(opcode, prefixes, instr::conditionals::jno_rel8),
        0x72 => new_instr!(opcode, prefixes, instr::conditionals::jc_rel8),
        0x73 => new_instr!(opcode, prefixes, instr::conditionals::jnc_rel8),
        0x74 => new_instr!(opcode, prefixes, instr::conditionals::jz_rel8),
        0x75 => new_instr!(opcode, prefixes, instr::conditionals::jnz_rel8),
        0x76 => new_instr!(opcode, prefixes, instr::conditionals::jbe_rel8),
        0x77 => new_instr!(opcode, prefixes, instr::conditionals::ja_rel8),
        0x78 => new_instr!(opcode, prefixes, instr::conditionals::js_rel8),
        0x79 => new_instr!(opcode, prefixes, instr::conditionals::jns_rel8),
        0x7a => new_instr!(opcode, prefixes, instr::conditionals::jp_rel8),
        0x7b => new_instr!(opcode, prefixes, instr::conditionals::jnp_rel8),
        0x7c => new_instr!(opcode, prefixes, instr::conditionals::jl_rel8),
        0x7d => new_instr!(opcode, prefixes, instr::conditionals::jge_rel8),
        0x7e => new_instr!(opcode, prefixes, instr::conditionals::jle_rel8),
        0x7f => new_instr!(opcode, prefixes, instr::conditionals::jg_rel8),
        opcode @ 0x80 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::arith::add_rm8_imm8),
            1 => new_instr!(opcode, prefixes, instr::arith::or_rm8_imm8),
            2 => new_instr!(opcode, prefixes, instr::arith::adc_rm8_imm8),
            3 => new_instr!(opcode, prefixes, instr::arith::sbb_rm8_imm8),
            4 => new_instr!(opcode, prefixes, instr::arith::and_rm8_imm8),
            5 => new_instr!(opcode, prefixes, instr::arith::sub_rm8_imm8),
            6 => new_instr!(opcode, prefixes, instr::arith::xor_rm8_imm8),
            7 => new_instr!(opcode, prefixes, instr::arith::cmp_rm8_imm8),
            extension => invalid(sys, opcode, Some(extension)),
        },
        opcode @ 0x81 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::arith::add_rm16_imm16),
            1 => new_instr!(opcode, prefixes, instr::arith::or_rm16_imm16),
            2 => new_instr!(opcode, prefixes, instr::arith::adc_rm16_imm16),
            3 => new_instr!(opcode, prefixes, instr::arith::sbb_rm16_imm16),
            4 => new_instr!(opcode, prefixes, instr::arith::and_rm16_imm16),
            5 => new_instr!(opcode, prefixes, instr::arith::sub_rm16_imm16),
            6 => new_instr!(opcode, prefixes, instr::arith::xor_rm16_imm16),
            7 => new_instr!(opcode, prefixes, instr::arith::cmp_rm16_imm16),
            extension => invalid(sys, opcode, Some(extension)),
        },
        opcode @ 0x83 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::arith::add_rm16_imm8),
            1 => new_instr!(opcode, prefixes, instr::arith::or_rm16_imm8),
            2 => new_instr!(opcode, prefixes, instr::arith::adc_rm16_imm8),
            3 => new_instr!(opcode, prefixes, instr::arith::sbb_rm16_imm8),
            4 => new_instr!(opcode, prefixes, instr::arith::and_rm16_imm8),
            5 => new_instr!(opcode, prefixes, instr::arith::sub_rm16_imm8),
            6 => new_instr!(opcode, prefixes, instr::arith::xor_rm16_imm8),
            7 => new_instr!(opcode, prefixes, instr::arith::cmp_rm16_imm8),
            extension => invalid(sys, opcode, Some(extension)),
        },
        0x84 => new_instr!(opcode, prefixes, instr::arith::test_rm8_r8),
        0x85 => new_instr!(opcode, prefixes, instr::arith::test_rm16_r16),
        0x86 => new_instr!(opcode, prefixes, instr::transfer::xchg_rm8_r8),
        0x87 => new_instr!(opcode, prefixes, instr::transfer::xchg_rm16_r16),
        0x88 => new_instr!(opcode, prefixes, instr::transfer::mov_rm8_r8),
        0x89 => new_instr!(opcode, prefixes, instr::transfer::mov_rm16_r16),
        0x8a => new_instr!(opcode, prefixes, instr::transfer::mov_r8_rm8),
        0x8b => new_instr!(opcode, prefixes, instr::transfer::mov_r16_rm16),
        0x8c => new_instr!(opcode, prefixes, instr::transfer::mov_rm16_sreg),
        0x8d => new_instr!(opcode, prefixes, instr::transfer::lea_r16_m16),
        0x8e => new_instr!(opcode, prefixes, instr::transfer::mov_sreg_rm16),
        opcode @ 0x8f => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::stack::pop_m16),
            extension => invalid(sys, opcode, Some(extension)),
        },
        opcode @ 0x90..=0x97 => new_instr!(opcode, prefixes, instr::transfer::xchg_ax_r16),
        0x9a => new_instr!(opcode, prefixes, instr::control::call_ptr16_16),
        0x9b => new_instr!(opcode, prefixes, instr::semaphores::wait),
        0x9c => new_instr!(opcode, prefixes, instr::flags::pushf),
        0x9d => new_instr!(opcode, prefixes, instr::flags::popf),
        0x9e => new_instr!(opcode, prefixes, instr::flags::sahf),
        0x9f => new_instr!(opcode, prefixes, instr::flags::lahf),
        0xa0 => new_instr!(opcode, prefixes, instr::transfer::mov_al_moffs8),
        0xa1 => new_instr!(opcode, prefixes, instr::transfer::mov_ax_moffs16),
        0xa2 => new_instr!(opcode, prefixes, instr::transfer::mov_moffs8_al),
        0xa3 => new_instr!(opcode, prefixes, instr::transfer::mov_moffs16_ax),
        0xa4 => new_instr!(opcode, prefixes, instr::strings::movsb),
        0xa5 => new_instr!(opcode, prefixes, instr::strings::movsw),
        0xa6 => new_instr!(opcode, prefixes, instr::strings::cmpsb),
        0xa7 => new_instr!(opcode, prefixes, instr::strings::cmpsw),
        0xa8 => new_instr!(opcode, prefixes, instr::arith::test_al_imm8),
        0xa9 => new_instr!(opcode, prefixes, instr::arith::test_ax_imm16),
        0xaa => new_instr!(opcode, prefixes, instr::strings::stosb),
        0xab => new_instr!(opcode, prefixes, instr::strings::stosw),
        0xac => new_instr!(opcode, prefixes, instr::strings::lodsb),
        0xad => new_instr!(opcode, prefixes, instr::strings::lodsw),
        0xae => new_instr!(opcode, prefixes, instr::strings::scasb),
        0xaf => new_instr!(opcode, prefixes, instr::strings::scasw),
        opcode @ 0xb0..=0xb7 => new_instr!(opcode, prefixes, instr::transfer::mov_r8_imm8),
        opcode @ 0xb8..=0xbf => new_instr!(opcode, prefixes, instr::transfer::mov_r16_imm16),
        opcode @ 0xc0 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::shifts::rol_rm8_imm8),
            1 => new_instr!(opcode, prefixes, instr::shifts::ror_rm8_imm8),
            2 => new_instr!(opcode, prefixes, instr::shifts::rcl_rm8_imm8),
            3 => new_instr!(opcode, prefixes, instr::shifts::rcr_rm8_imm8),
            4 => new_instr!(opcode, prefixes, instr::shifts::shl_rm8_imm8),
            5 => new_instr!(opcode, prefixes, instr::shifts::shr_rm8_imm8),
            7 => new_instr!(opcode, prefixes, instr::shifts::sar_rm8_imm8),
            extension => invalid(sys, opcode, Some(extension)),
        },
        opcode @ 0xc1 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::shifts::rol_rm16_imm8),
            1 => new_instr!(opcode, prefixes, instr::shifts::ror_rm16_imm8),
            2 => new_instr!(opcode, prefixes, instr::shifts::rcl_rm16_imm8),
            3 => new_instr!(opcode, prefixes, instr::shifts::rcr_rm16_imm8),
            4 => new_instr!(opcode, prefixes, instr::shifts::shl_rm16_imm8),
            5 => new_instr!(opcode, prefixes, instr::shifts::shr_rm16_imm8),
            7 => new_instr!(opcode, prefixes, instr::shifts::sar_rm16_imm8),
            extension => invalid(sys, opcode, Some(extension)),
        },
        0xc2 => new_instr!(opcode, prefixes, instr::control::ret_imm16_near),
        0xc3 => new_instr!(opcode, prefixes, instr::control::ret_near),
        0xc4 => new_instr!(opcode, prefixes, instr::transfer::les_r16_m16_16),
        0xc5 => new_instr!(opcode, prefixes, instr::transfer::lds_r16_m16_16),
        opcode @ 0xc6 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::transfer::mov_rm8_imm8),
            extension => invalid(sys, opcode, Some(extension)),
        },
        opcode @ 0xc7 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::transfer::mov_rm16_imm16),
            extension => invalid(sys, opcode, Some(extension)),
        },
        0xc8 => new_instr!(opcode, prefixes, instr::control::enter_imm16_imm8),
        0xc9 => new_instr!(opcode, prefixes, instr::control::leave),
        0xca => new_instr!(opcode, prefixes, instr::control::ret_imm16_far),
        0xcb => new_instr!(opcode, prefixes, instr::control::ret_far),
        opcode @ 0xd0 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::shifts::rol_rm8_1),
            1 => new_instr!(opcode, prefixes, instr::shifts::ror_rm8_1),
            2 => new_instr!(opcode, prefixes, instr::shifts::rcl_rm8_1),
            3 => new_instr!(opcode, prefixes, instr::shifts::rcr_rm8_1),
            4 => new_instr!(opcode, prefixes, instr::shifts::shl_rm8_1),
            5 => new_instr!(opcode, prefixes, instr::shifts::shr_rm8_1),
            7 => new_instr!(opcode, prefixes, instr::shifts::sar_rm8_1),
            extension => invalid(sys, opcode, Some(extension)),
        },
        opcode @ 0xd1 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::shifts::rol_rm16_1),
            1 => new_instr!(opcode, prefixes, instr::shifts::ror_rm16_1),
            2 => new_instr!(opcode, prefixes, instr::shifts::rcl_rm16_1),
            3 => new_instr!(opcode, prefixes, instr::shifts::rcr_rm16_1),
            4 => new_instr!(opcode, prefixes, instr::shifts::shl_rm16_1),
            5 => new_instr!(opcode, prefixes, instr::shifts::shr_rm16_1),
            7 => new_instr!(opcode, prefixes, instr::shifts::sar_rm16_1),
            extension => invalid(sys, opcode, Some(extension)),
        },
        opcode @ 0xd2 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::shifts::rol_rm8_cl),
            1 => new_instr!(opcode, prefixes, instr::shifts::ror_rm8_cl),
            2 => new_instr!(opcode, prefixes, instr::shifts::rcl_rm8_cl),
            3 => new_instr!(opcode, prefixes, instr::shifts::rcr_rm8_cl),
            4 => new_instr!(opcode, prefixes, instr::shifts::shl_rm8_cl),
            5 => new_instr!(opcode, prefixes, instr::shifts::shr_rm8_cl),
            7 => new_instr!(opcode, prefixes, instr::shifts::sar_rm8_cl),
            extension => invalid(sys, opcode, Some(extension)),
        },
        opcode @ 0xd3 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::shifts::rol_rm16_cl),
            1 => new_instr!(opcode, prefixes, instr::shifts::ror_rm16_cl),
            2 => new_instr!(opcode, prefixes, instr::shifts::rcl_rm16_cl),
            3 => new_instr!(opcode, prefixes, instr::shifts::rcr_rm16_cl),
            4 => new_instr!(opcode, prefixes, instr::shifts::shl_rm16_cl),
            5 => new_instr!(opcode, prefixes, instr::shifts::shr_rm16_cl),
            7 => new_instr!(opcode, prefixes, instr::shifts::sar_rm16_cl),
            extension => invalid(sys, opcode, Some(extension)),
        },
        0xe0 => new_instr!(opcode, prefixes, instr::control::loopne_rel8),
        0xe1 => new_instr!(opcode, prefixes, instr::control::loope_rel8),
        0xe2 => new_instr!(opcode, prefixes, instr::control::loop_rel8),
        0xe3 => new_instr!(opcode, prefixes, instr::control::jcxz_rel8),
        0xe4 => new_instr!(opcode, prefixes, instr::ports::in_al_imm8),
        0xe5 => new_instr!(opcode, prefixes, instr::ports::in_ax_imm8),
        0xe6 => new_instr!(opcode, prefixes, instr::ports::out_imm8_al),
        0xe7 => new_instr!(opcode, prefixes, instr::ports::out_imm8_ax),
        0xe8 => new_instr!(opcode, prefixes, instr::control::call_rel16),
        0xe9 => new_instr!(opcode, prefixes, instr::control::jmp_rel16),
        0xea => new_instr!(opcode, prefixes, instr::control::jmp_ptr16_16),
        0xeb => new_instr!(opcode, prefixes, instr::control::jmp_rel8),
        0xec => new_instr!(opcode, prefixes, instr::ports::in_al_dx),
        0xed => new_instr!(opcode, prefixes, instr::ports::in_ax_dx),
        0xee => new_instr!(opcode, prefixes, instr::ports::out_dx_al),
        0xef => new_instr!(opcode, prefixes, instr::ports::out_dx_ax),
        0xf4 => new_instr!(opcode, prefixes, instr::semaphores::hlt),
        0xf5 => new_instr!(opcode, prefixes, instr::flags::cmc),
        opcode @ 0xf6 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::arith::test_rm8_imm8),
            2 => new_instr!(opcode, prefixes, instr::arith::not_rm8),
            3 => new_instr!(opcode, prefixes, instr::arith::neg_rm8),
            4 => new_instr!(opcode, prefixes, instr::arith::mul_rm8),
            6 => new_instr!(opcode, prefixes, instr::arith::div_rm8),
            7 => new_instr!(opcode, prefixes, instr::arith::idiv_rm8),
            extension => invalid(sys, opcode, Some(extension)),
        },
        opcode @ 0xf7 => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::arith::test_rm16_imm16),
            2 => new_instr!(opcode, prefixes, instr::arith::not_rm16),
            3 => new_instr!(opcode, prefixes, instr::arith::neg_rm16),
            4 => new_instr!(opcode, prefixes, instr::arith::mul_rm16),
            6 => new_instr!(opcode, prefixes, instr::arith::div_rm16),
            7 => new_instr!(opcode, prefixes, instr::arith::idiv_rm16),
            extension => invalid(sys, opcode, Some(extension)),
        },
        0xf8 => new_instr!(opcode, prefixes, instr::flags::clc),
        0xf9 => new_instr!(opcode, prefixes, instr::flags::stc),
        0xfa => new_instr!(opcode, prefixes, instr::flags::cli),
        0xfb => new_instr!(opcode, prefixes, instr::flags::sti),
        0xfc => new_instr!(opcode, prefixes, instr::flags::cld),
        0xfd => new_instr!(opcode, prefixes, instr::flags::std),
        opcode @ 0xfe => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::arith::inc_rm8),
            1 => new_instr!(opcode, prefixes, instr::arith::dec_rm8),
            extension => invalid(sys, opcode, Some(extension)),
        },
        opcode @ 0xff => match extension(sys) {
            0 => new_instr!(opcode, prefixes, instr::arith::inc_rm16),
            1 => new_instr!(opcode, prefixes, instr::arith::dec_rm16),
            2 => new_instr!(opcode, prefixes, instr::control::call_rm16),
            3 => new_instr!(opcode, prefixes, instr::control::call_m16_16),
            4 => new_instr!(opcode, prefixes, instr::control::jmp_rm16),
            5 => new_instr!(opcode, prefixes, instr::control::jmp_m16_16),
            6 => new_instr!(opcode, prefixes, instr::stack::push_m16),
            extension => invalid(sys, opcode, Some(extension)),
        },
        opcode => invalid(sys, opcode, None),
    }
}

pub fn decode(sys: &mut System) -> Instr {
    let mut prefixes = Prefixes::new();
    loop {
        match sys.read_mem_8() {
            0x26 => prefixes.segment = Es,
            0x2e => prefixes.segment = Cs,
            0x36 => prefixes.segment = Ss,
            0x3e => prefixes.segment = Ds,
            0xf0 => prefixes.lock = true,
            0xf2 => prefixes.rep_ne = true,
            0xf3 => prefixes.rep_or_rep_e = true,
            opcode => {
                print!("[{:#04x}] ", opcode);
                io::stdout().flush().unwrap();

                break match_opcode(sys, opcode, prefixes);
            }
        }
    }
}

fn extension(sys: &mut System) -> u8 {
    // TODO: Does every instruction with an extension use ModRM?
    (sys.peek_mem_8() / 0o10) % 0o10
}

fn invalid(sys: &mut System, opcode: u8, extension: Option<u8>) -> ! {
    match extension {
        Some(extension) => panic!(
            "invalid or unimplemented instruction: {:#x} /{}",
            opcode, extension
        ),
        None => {
            let extension = self::extension(sys);
            panic!(
                "invalid or unimplemented instruction: {:#x} (potentially /{})",
                opcode, extension
            )
        }
    }
}
